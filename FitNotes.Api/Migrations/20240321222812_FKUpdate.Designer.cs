// <auto-generated />
using System;
using FitNotes.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FitNotes.Api.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240321222812_FKUpdate")]
    partial class FKUpdate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FitNotes.Api.Entities.Exercises", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsTime")
                        .HasColumnType("boolean");

                    b.Property<string>("MuscleGroups")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UsersId");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("FitNotes.Api.Entities.Sets", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<Guid>("ExercisesId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsMetric")
                        .HasColumnType("boolean");

                    b.Property<int>("RPE")
                        .HasColumnType("integer");

                    b.Property<int>("Reps")
                        .HasColumnType("integer");

                    b.Property<string>("Tempo")
                        .HasColumnType("text");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid");

                    b.Property<int>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ExercisesId");

                    b.HasIndex("UsersId");

                    b.ToTable("Sets");
                });

            modelBuilder.Entity("FitNotes.Api.Entities.Users", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("FitNotes.Api.Entities.Exercises", b =>
                {
                    b.HasOne("FitNotes.Api.Entities.Users", "Users")
                        .WithMany("Exercises")
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("FitNotes.Api.Entities.Sets", b =>
                {
                    b.HasOne("FitNotes.Api.Entities.Exercises", "Exercises")
                        .WithMany("Sets")
                        .HasForeignKey("ExercisesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitNotes.Api.Entities.Users", "Users")
                        .WithMany("Sets")
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercises");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("FitNotes.Api.Entities.Exercises", b =>
                {
                    b.Navigation("Sets");
                });

            modelBuilder.Entity("FitNotes.Api.Entities.Users", b =>
                {
                    b.Navigation("Exercises");

                    b.Navigation("Sets");
                });
#pragma warning restore 612, 618
        }
    }
}
